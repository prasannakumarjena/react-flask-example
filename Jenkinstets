pipeline {
    agent any
    environment{
        DOCKER_TAG = getDockerTag()
    }
    stages{
        stage('build Docker image'){
            steps{
                sh "docker build . -t pkjdocker/myapp:${DOCKER_TAG}"
            }
        }
        stage('dockerhub push'){
            steps{
                withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerhubpwd')]) {
                sh "docker login -u pkjdocker -p ${dockerhubpwd}"
                sh "docker push pkjdocker/myapp:${DOCKER_TAG}"
              }
            }
        }
        stage('deploy to k8s server'){
            steps{
                sshagent(['kops-server']) {
                sh "scp -o StrictHostKeyChecking=no services.yml pods.yml ec2-user@13.233.215.240:/home/ec2-user"
                script{
                    try{
                        sh "ssh ec2-user@13.233.215.240 kubectl apply -f ."
                    }catch(error){
                        sh "ssh ec2-user@13.233.215.240 kubectl create -f ."
                      }
                   } 
                 }
            }
        }
    }
}
def getDockerTag(){
    def tag = sh script: 'git rev-parse HEAD' , returnStdout: true
    return tag
}

